#summary Main page of Range Analysis project

= Introduction =

The goal of this project is to implement an inter-procedural range analysis algorithm that scales up to programs with millions of lines of code. Contrary to many previous techniques, we handle comparisons between variables without resorting to relational lattices or expensive algorithms. We achieve path sensitiveness by using Bodik's [http://dl.acm.org/citation.cfm?id=349342 Extended Static Single Assignment] form as the intermediate representation. We show that by processing the strongly connected components that constitute the graph of dependences between variables in topological order we not only gain in time, but also in precision. We have implemented our technique in [http://llvm.org/ LLVM], an industrial strength compiler, and have been able to process over 4 million assembly instructions in a few seconds.

= Details =

  * [gallery Gallery of Examples]: this page contains examples of C programs, their CFGs, and the constraint graphs that we produce for them.
  * [Related Related works]: we are discussing some works related to ours in this page.
  * [HowToUseRangeAnalysisInAnotherPass How to use Range Analysis in another LLVM pass]: if you are in need of a range analysis pass for LLVM, this page is where you should go. We explain how to incorporate our project in your LLVM pass.
  * [HowToUseRangeAnalysisInstrumentationPass How to use our dynamic interval profiler]: we have a profiler that records, for each variable, the lowest and highest values that it has been assigned during the program execution. This profiler is quite useful to estimate how precise is our analysis.  
  * [Examples]