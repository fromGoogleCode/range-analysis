; ModuleID = '/home/raphael/llvm-3.3/projects/test-suite/InstrumentationLibrariesToLink/TcProfilerLinkedLibrary.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.LoopList = type { %struct._loopStats* }
%struct._loopStats = type { %struct._loopStats*, i64, i32, %struct.LoopResultTree }
%struct.LoopResultTree = type { %struct._loopResults* }
%struct._loopResults = type { %struct._loopResults*, %struct._loopResults*, i64, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [28 x i8] c"TripCount %d %s.%ld %ld %d\0A\00", align 1
@loops = common global %struct.LoopList zeroinitializer, align 8
@.str1 = private unnamed_addr constant [10 x i8] c"loops.out\00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@stderr = external global %struct._IO_FILE*
@.str3 = private unnamed_addr constant [29 x i8] c"Error opening file loops.out\00", align 1

; Function Attrs: nounwind uwtable
define void @printInOrder(%struct._loopResults* %root, %struct._IO_FILE* %outStream, i32 %LoopClass, i8* %moduleIdentifier, i64 %ID) #0 {
entry:
  %root.addr = alloca %struct._loopResults*, align 8
  %outStream.addr = alloca %struct._IO_FILE*, align 8
  %LoopClass.addr = alloca i32, align 4
  %moduleIdentifier.addr = alloca i8*, align 8
  %ID.addr = alloca i64, align 8
  store %struct._loopResults* %root, %struct._loopResults** %root.addr, align 8
  store %struct._IO_FILE* %outStream, %struct._IO_FILE** %outStream.addr, align 8
  store i32 %LoopClass, i32* %LoopClass.addr, align 4
  store i8* %moduleIdentifier, i8** %moduleIdentifier.addr, align 8
  store i64 %ID, i64* %ID.addr, align 8
  %0 = load %struct._loopResults** %root.addr, align 8
  %tobool = icmp ne %struct._loopResults* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._loopResults** %root.addr, align 8
  %left = getelementptr inbounds %struct._loopResults* %1, i32 0, i32 0
  %2 = load %struct._loopResults** %left, align 8
  %3 = load %struct._IO_FILE** %outStream.addr, align 8
  %4 = load i32* %LoopClass.addr, align 4
  %5 = load i8** %moduleIdentifier.addr, align 8
  %6 = load i64* %ID.addr, align 8
  call void @printInOrder(%struct._loopResults* %2, %struct._IO_FILE* %3, i32 %4, i8* %5, i64 %6)
  %7 = load %struct._IO_FILE** %outStream.addr, align 8
  %8 = load i32* %LoopClass.addr, align 4
  %9 = load i8** %moduleIdentifier.addr, align 8
  %10 = load i64* %ID.addr, align 8
  %11 = load %struct._loopResults** %root.addr, align 8
  %GroupID = getelementptr inbounds %struct._loopResults* %11, i32 0, i32 2
  %12 = load i64* %GroupID, align 8
  %13 = load %struct._loopResults** %root.addr, align 8
  %numInstances = getelementptr inbounds %struct._loopResults* %13, i32 0, i32 3
  %14 = load i32* %numInstances, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([28 x i8]* @.str, i32 0, i32 0), i32 %8, i8* %9, i64 %10, i64 %12, i32 %14)
  %15 = load %struct._loopResults** %root.addr, align 8
  %right = getelementptr inbounds %struct._loopResults* %15, i32 0, i32 1
  %16 = load %struct._loopResults** %right, align 8
  %17 = load %struct._IO_FILE** %outStream.addr, align 8
  %18 = load i32* %LoopClass.addr, align 4
  %19 = load i8** %moduleIdentifier.addr, align 8
  %20 = load i64* %ID.addr, align 8
  call void @printInOrder(%struct._loopResults* %16, %struct._IO_FILE* %17, i32 %18, i8* %19, i64 %20)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define %struct._loopResults* @createLoopResults(i64 %GroupID, i32 %numInstances) #0 {
entry:
  %GroupID.addr = alloca i64, align 8
  %numInstances.addr = alloca i32, align 4
  %result = alloca %struct._loopResults*, align 8
  store i64 %GroupID, i64* %GroupID.addr, align 8
  store i32 %numInstances, i32* %numInstances.addr, align 4
  %call = call noalias i8* @malloc(i64 32) #3
  %0 = bitcast i8* %call to %struct._loopResults*
  store %struct._loopResults* %0, %struct._loopResults** %result, align 8
  %1 = load i64* %GroupID.addr, align 8
  %2 = load %struct._loopResults** %result, align 8
  %GroupID1 = getelementptr inbounds %struct._loopResults* %2, i32 0, i32 2
  store i64 %1, i64* %GroupID1, align 8
  %3 = load i32* %numInstances.addr, align 4
  %4 = load %struct._loopResults** %result, align 8
  %numInstances2 = getelementptr inbounds %struct._loopResults* %4, i32 0, i32 3
  store i32 %3, i32* %numInstances2, align 4
  %5 = load %struct._loopResults** %result, align 8
  %left = getelementptr inbounds %struct._loopResults* %5, i32 0, i32 0
  store %struct._loopResults* null, %struct._loopResults** %left, align 8
  %6 = load %struct._loopResults** %result, align 8
  %right = getelementptr inbounds %struct._loopResults* %6, i32 0, i32 1
  store %struct._loopResults* null, %struct._loopResults** %right, align 8
  %7 = load %struct._loopResults** %result, align 8
  ret %struct._loopResults* %7
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct._loopResults* @findLoopResults(i64 %GroupID, %struct._loopResults* %root) #0 {
entry:
  %retval = alloca %struct._loopResults*, align 8
  %GroupID.addr = alloca i64, align 8
  %root.addr = alloca %struct._loopResults*, align 8
  store i64 %GroupID, i64* %GroupID.addr, align 8
  store %struct._loopResults* %root, %struct._loopResults** %root.addr, align 8
  %0 = load %struct._loopResults** %root.addr, align 8
  %tobool = icmp ne %struct._loopResults* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._loopResults* null, %struct._loopResults** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64* %GroupID.addr, align 8
  %2 = load %struct._loopResults** %root.addr, align 8
  %GroupID1 = getelementptr inbounds %struct._loopResults* %2, i32 0, i32 2
  %3 = load i64* %GroupID1, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct._loopResults** %root.addr, align 8
  store %struct._loopResults* %4, %struct._loopResults** %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %5 = load i64* %GroupID.addr, align 8
  %6 = load %struct._loopResults** %root.addr, align 8
  %GroupID4 = getelementptr inbounds %struct._loopResults* %6, i32 0, i32 2
  %7 = load i64* %GroupID4, align 8
  %cmp5 = icmp slt i64 %5, %7
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end3
  %8 = load i64* %GroupID.addr, align 8
  %9 = load %struct._loopResults** %root.addr, align 8
  %left = getelementptr inbounds %struct._loopResults* %9, i32 0, i32 0
  %10 = load %struct._loopResults** %left, align 8
  %call = call %struct._loopResults* @findLoopResults(i64 %8, %struct._loopResults* %10)
  store %struct._loopResults* %call, %struct._loopResults** %retval
  br label %return

if.end7:                                          ; preds = %if.end3
  %11 = load i64* %GroupID.addr, align 8
  %12 = load %struct._loopResults** %root.addr, align 8
  %right = getelementptr inbounds %struct._loopResults* %12, i32 0, i32 1
  %13 = load %struct._loopResults** %right, align 8
  %call8 = call %struct._loopResults* @findLoopResults(i64 %11, %struct._loopResults* %13)
  store %struct._loopResults* %call8, %struct._loopResults** %retval
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.then2, %if.then
  %14 = load %struct._loopResults** %retval
  ret %struct._loopResults* %14
}

; Function Attrs: nounwind uwtable
define void @freeLoopResults(%struct._loopResults* %root) #0 {
entry:
  %root.addr = alloca %struct._loopResults*, align 8
  store %struct._loopResults* %root, %struct._loopResults** %root.addr, align 8
  %0 = load %struct._loopResults** %root.addr, align 8
  %tobool = icmp ne %struct._loopResults* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._loopResults** %root.addr, align 8
  %left = getelementptr inbounds %struct._loopResults* %1, i32 0, i32 0
  %2 = load %struct._loopResults** %left, align 8
  call void @freeLoopResults(%struct._loopResults* %2)
  %3 = load %struct._loopResults** %root.addr, align 8
  %right = getelementptr inbounds %struct._loopResults* %3, i32 0, i32 1
  %4 = load %struct._loopResults** %right, align 8
  call void @freeLoopResults(%struct._loopResults* %4)
  %5 = load %struct._loopResults** %root.addr, align 8
  %6 = bitcast %struct._loopResults* %5 to i8*
  call void @free(i8* %6) #3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define void @initLoopResultTree(%struct.LoopResultTree* %T) #0 {
entry:
  %T.addr = alloca %struct.LoopResultTree*, align 8
  store %struct.LoopResultTree* %T, %struct.LoopResultTree** %T.addr, align 8
  %0 = load %struct.LoopResultTree** %T.addr, align 8
  %root = getelementptr inbounds %struct.LoopResultTree* %0, i32 0, i32 0
  store %struct._loopResults* null, %struct._loopResults** %root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define %struct._loopResults* @getOrInsertLoopResult(%struct.LoopResultTree* %T, i64 %GroupID) #0 {
entry:
  %T.addr = alloca %struct.LoopResultTree*, align 8
  %GroupID.addr = alloca i64, align 8
  %result = alloca %struct._loopResults*, align 8
  %found = alloca i32, align 4
  %previousNode = alloca %struct._loopResults*, align 8
  %currentNode = alloca %struct._loopResults*, align 8
  store %struct.LoopResultTree* %T, %struct.LoopResultTree** %T.addr, align 8
  store i64 %GroupID, i64* %GroupID.addr, align 8
  %0 = load i64* %GroupID.addr, align 8
  %1 = load %struct.LoopResultTree** %T.addr, align 8
  %root = getelementptr inbounds %struct.LoopResultTree* %1, i32 0, i32 0
  %2 = load %struct._loopResults** %root, align 8
  %call = call %struct._loopResults* @findLoopResults(i64 %0, %struct._loopResults* %2)
  store %struct._loopResults* %call, %struct._loopResults** %result, align 8
  %3 = load %struct._loopResults** %result, align 8
  %tobool = icmp ne %struct._loopResults* %3, null
  br i1 %tobool, label %if.end19, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64* %GroupID.addr, align 8
  %call1 = call %struct._loopResults* @createLoopResults(i64 %4, i32 0)
  store %struct._loopResults* %call1, %struct._loopResults** %result, align 8
  %5 = load %struct.LoopResultTree** %T.addr, align 8
  %root2 = getelementptr inbounds %struct.LoopResultTree* %5, i32 0, i32 0
  %6 = load %struct._loopResults** %root2, align 8
  %tobool3 = icmp ne %struct._loopResults* %6, null
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %7 = load %struct._loopResults** %result, align 8
  %8 = load %struct.LoopResultTree** %T.addr, align 8
  %root5 = getelementptr inbounds %struct.LoopResultTree* %8, i32 0, i32 0
  store %struct._loopResults* %7, %struct._loopResults** %root5, align 8
  br label %if.end18

if.else:                                          ; preds = %if.then
  store i32 0, i32* %found, align 4
  %9 = load %struct.LoopResultTree** %T.addr, align 8
  %root6 = getelementptr inbounds %struct.LoopResultTree* %9, i32 0, i32 0
  %10 = load %struct._loopResults** %root6, align 8
  store %struct._loopResults* %10, %struct._loopResults** %currentNode, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %11 = load %struct._loopResults** %currentNode, align 8
  %tobool7 = icmp ne %struct._loopResults* %11, null
  br i1 %tobool7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct._loopResults** %currentNode, align 8
  store %struct._loopResults* %12, %struct._loopResults** %previousNode, align 8
  %13 = load i64* %GroupID.addr, align 8
  %14 = load %struct._loopResults** %currentNode, align 8
  %GroupID8 = getelementptr inbounds %struct._loopResults* %14, i32 0, i32 2
  %15 = load i64* %GroupID8, align 8
  %cmp = icmp slt i64 %13, %15
  br i1 %cmp, label %if.then9, label %if.else10

if.then9:                                         ; preds = %while.body
  %16 = load %struct._loopResults** %currentNode, align 8
  %left = getelementptr inbounds %struct._loopResults* %16, i32 0, i32 0
  %17 = load %struct._loopResults** %left, align 8
  store %struct._loopResults* %17, %struct._loopResults** %currentNode, align 8
  br label %if.end

if.else10:                                        ; preds = %while.body
  %18 = load %struct._loopResults** %currentNode, align 8
  %right = getelementptr inbounds %struct._loopResults* %18, i32 0, i32 1
  %19 = load %struct._loopResults** %right, align 8
  store %struct._loopResults* %19, %struct._loopResults** %currentNode, align 8
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then9
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %20 = load i64* %GroupID.addr, align 8
  %21 = load %struct._loopResults** %previousNode, align 8
  %GroupID11 = getelementptr inbounds %struct._loopResults* %21, i32 0, i32 2
  %22 = load i64* %GroupID11, align 8
  %cmp12 = icmp slt i64 %20, %22
  br i1 %cmp12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %while.end
  %23 = load %struct._loopResults** %result, align 8
  %24 = load %struct._loopResults** %previousNode, align 8
  %left14 = getelementptr inbounds %struct._loopResults* %24, i32 0, i32 0
  store %struct._loopResults* %23, %struct._loopResults** %left14, align 8
  br label %if.end17

if.else15:                                        ; preds = %while.end
  %25 = load %struct._loopResults** %result, align 8
  %26 = load %struct._loopResults** %previousNode, align 8
  %right16 = getelementptr inbounds %struct._loopResults* %26, i32 0, i32 1
  store %struct._loopResults* %25, %struct._loopResults** %right16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then13
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then4
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %entry
  %27 = load %struct._loopResults** %result, align 8
  ret %struct._loopResults* %27
}

; Function Attrs: nounwind uwtable
define %struct._loopStats* @createLoopStats(i64 %new_ID, i32 %LoopClass) #0 {
entry:
  %new_ID.addr = alloca i64, align 8
  %LoopClass.addr = alloca i32, align 4
  %result = alloca %struct._loopStats*, align 8
  store i64 %new_ID, i64* %new_ID.addr, align 8
  store i32 %LoopClass, i32* %LoopClass.addr, align 4
  %call = call noalias i8* @malloc(i64 32) #3
  %0 = bitcast i8* %call to %struct._loopStats*
  store %struct._loopStats* %0, %struct._loopStats** %result, align 8
  %1 = load i64* %new_ID.addr, align 8
  %2 = load %struct._loopStats** %result, align 8
  %ID = getelementptr inbounds %struct._loopStats* %2, i32 0, i32 1
  store i64 %1, i64* %ID, align 8
  %3 = load i32* %LoopClass.addr, align 4
  %4 = load %struct._loopStats** %result, align 8
  %LoopClass1 = getelementptr inbounds %struct._loopStats* %4, i32 0, i32 2
  store i32 %3, i32* %LoopClass1, align 4
  %5 = load %struct._loopStats** %result, align 8
  %T = getelementptr inbounds %struct._loopStats* %5, i32 0, i32 3
  call void @initLoopResultTree(%struct.LoopResultTree* %T)
  %6 = load %struct._loopStats** %result, align 8
  %next = getelementptr inbounds %struct._loopStats* %6, i32 0, i32 0
  store %struct._loopStats* null, %struct._loopStats** %next, align 8
  %7 = load %struct._loopStats** %result, align 8
  ret %struct._loopStats* %7
}

; Function Attrs: nounwind uwtable
define void @addInstance(%struct._loopStats* %Stats, i64 %tripCount, i64 %estimatedTripCount) #0 {
entry:
  %Stats.addr = alloca %struct._loopStats*, align 8
  %tripCount.addr = alloca i64, align 8
  %estimatedTripCount.addr = alloca i64, align 8
  %GroupID = alloca i64, align 8
  %lr = alloca %struct._loopResults*, align 8
  store %struct._loopStats* %Stats, %struct._loopStats** %Stats.addr, align 8
  store i64 %tripCount, i64* %tripCount.addr, align 8
  store i64 %estimatedTripCount, i64* %estimatedTripCount.addr, align 8
  %0 = load i64* %estimatedTripCount.addr, align 8
  %1 = load i64* %tripCount.addr, align 8
  %sub = sub nsw i64 %1, 1
  %cmp = icmp sge i64 %0, %sub
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i64* %estimatedTripCount.addr, align 8
  %3 = load i64* %tripCount.addr, align 8
  %sub1 = sub nsw i64 %3, 1
  %cmp2 = icmp sle i64 %2, %sub1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i64 3, i64* %GroupID, align 8
  br label %if.end30

if.else:                                          ; preds = %land.lhs.true, %entry
  %4 = load i64* %estimatedTripCount.addr, align 8
  %conv = sitofp i64 %4 to double
  %5 = load i64* %tripCount.addr, align 8
  %conv3 = sitofp i64 %5 to double
  %call = call double @sqrt(double %conv3) #3
  %cmp4 = fcmp ole double %conv, %call
  br i1 %cmp4, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else
  store i64 0, i64* %GroupID, align 8
  br label %if.end29

if.else7:                                         ; preds = %if.else
  %6 = load i64* %estimatedTripCount.addr, align 8
  %7 = load i64* %tripCount.addr, align 8
  %div = sdiv i64 %7, 2
  %cmp8 = icmp sle i64 %6, %div
  br i1 %cmp8, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else7
  store i64 1, i64* %GroupID, align 8
  br label %if.end28

if.else11:                                        ; preds = %if.else7
  %8 = load i64* %estimatedTripCount.addr, align 8
  %9 = load i64* %tripCount.addr, align 8
  %sub12 = sub nsw i64 %9, 2
  %cmp13 = icmp sle i64 %8, %sub12
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %if.else11
  store i64 2, i64* %GroupID, align 8
  br label %if.end27

if.else16:                                        ; preds = %if.else11
  %10 = load i64* %estimatedTripCount.addr, align 8
  %11 = load i64* %tripCount.addr, align 8
  %mul = mul nsw i64 %11, 2
  %cmp17 = icmp sle i64 %10, %mul
  br i1 %cmp17, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else16
  store i64 4, i64* %GroupID, align 8
  br label %if.end26

if.else20:                                        ; preds = %if.else16
  %12 = load i64* %estimatedTripCount.addr, align 8
  %13 = load i64* %tripCount.addr, align 8
  %14 = load i64* %tripCount.addr, align 8
  %mul21 = mul nsw i64 %13, %14
  %cmp22 = icmp sle i64 %12, %mul21
  br i1 %cmp22, label %if.then24, label %if.else25

if.then24:                                        ; preds = %if.else20
  store i64 5, i64* %GroupID, align 8
  br label %if.end

if.else25:                                        ; preds = %if.else20
  store i64 6, i64* %GroupID, align 8
  br label %if.end

if.end:                                           ; preds = %if.else25, %if.then24
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then19
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then15
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then10
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then6
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then
  %15 = load %struct._loopStats** %Stats.addr, align 8
  %T = getelementptr inbounds %struct._loopStats* %15, i32 0, i32 3
  %16 = load i64* %GroupID, align 8
  %call31 = call %struct._loopResults* @getOrInsertLoopResult(%struct.LoopResultTree* %T, i64 %16)
  store %struct._loopResults* %call31, %struct._loopResults** %lr, align 8
  %17 = load %struct._loopResults** %lr, align 8
  %numInstances = getelementptr inbounds %struct._loopResults* %17, i32 0, i32 3
  %18 = load i32* %numInstances, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %numInstances, align 4
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind uwtable
define void @freeList(%struct.LoopList* %L) #0 {
entry:
  %L.addr = alloca %struct.LoopList*, align 8
  %currentNode = alloca %struct._loopStats*, align 8
  %nextNode = alloca %struct._loopStats*, align 8
  store %struct.LoopList* %L, %struct.LoopList** %L.addr, align 8
  %0 = load %struct.LoopList** %L.addr, align 8
  %First = getelementptr inbounds %struct.LoopList* %0, i32 0, i32 0
  %1 = load %struct._loopStats** %First, align 8
  store %struct._loopStats* %1, %struct._loopStats** %currentNode, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._loopStats** %currentNode, align 8
  %cmp = icmp ne %struct._loopStats* %2, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct._loopStats** %currentNode, align 8
  %next = getelementptr inbounds %struct._loopStats* %3, i32 0, i32 0
  %4 = load %struct._loopStats** %next, align 8
  store %struct._loopStats* %4, %struct._loopStats** %nextNode, align 8
  %5 = load %struct._loopStats** %currentNode, align 8
  %T = getelementptr inbounds %struct._loopStats* %5, i32 0, i32 3
  %root = getelementptr inbounds %struct.LoopResultTree* %T, i32 0, i32 0
  %6 = load %struct._loopResults** %root, align 8
  call void @freeLoopResults(%struct._loopResults* %6)
  %7 = load %struct._loopStats** %currentNode, align 8
  %8 = bitcast %struct._loopStats* %7 to i8*
  call void @free(i8* %8) #3
  %9 = load %struct._loopStats** %nextNode, align 8
  store %struct._loopStats* %9, %struct._loopStats** %currentNode, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load %struct.LoopList** %L.addr, align 8
  %First1 = getelementptr inbounds %struct.LoopList* %10, i32 0, i32 0
  store %struct._loopStats* null, %struct._loopStats** %First1, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define %struct._loopStats* @getOrInsertLoop(%struct.LoopList* %L, i64 %ID, i32 %LoopClass) #0 {
entry:
  %retval = alloca %struct._loopStats*, align 8
  %L.addr = alloca %struct.LoopList*, align 8
  %ID.addr = alloca i64, align 8
  %LoopClass.addr = alloca i32, align 4
  %currentNode = alloca %struct._loopStats*, align 8
  %lastNode = alloca %struct._loopStats*, align 8
  %newNode = alloca %struct._loopStats*, align 8
  store %struct.LoopList* %L, %struct.LoopList** %L.addr, align 8
  store i64 %ID, i64* %ID.addr, align 8
  store i32 %LoopClass, i32* %LoopClass.addr, align 4
  %0 = load %struct.LoopList** %L.addr, align 8
  %First = getelementptr inbounds %struct.LoopList* %0, i32 0, i32 0
  %1 = load %struct._loopStats** %First, align 8
  store %struct._loopStats* %1, %struct._loopStats** %currentNode, align 8
  store %struct._loopStats* null, %struct._loopStats** %lastNode, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load %struct._loopStats** %currentNode, align 8
  %cmp = icmp ne %struct._loopStats* %2, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct._loopStats** %currentNode, align 8
  %ID1 = getelementptr inbounds %struct._loopStats* %3, i32 0, i32 1
  %4 = load i64* %ID1, align 8
  %5 = load i64* %ID.addr, align 8
  %cmp2 = icmp eq i64 %4, %5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %6 = load %struct._loopStats** %currentNode, align 8
  store %struct._loopStats* %6, %struct._loopStats** %lastNode, align 8
  %7 = load %struct._loopStats** %currentNode, align 8
  %next = getelementptr inbounds %struct._loopStats* %7, i32 0, i32 0
  %8 = load %struct._loopStats** %next, align 8
  store %struct._loopStats* %8, %struct._loopStats** %currentNode, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %9 = load %struct._loopStats** %currentNode, align 8
  %cmp3 = icmp ne %struct._loopStats* %9, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %while.end
  %10 = load %struct._loopStats** %currentNode, align 8
  store %struct._loopStats* %10, %struct._loopStats** %retval
  br label %return

if.end5:                                          ; preds = %while.end
  %11 = load i64* %ID.addr, align 8
  %12 = load i32* %LoopClass.addr, align 4
  %call = call %struct._loopStats* @createLoopStats(i64 %11, i32 %12)
  store %struct._loopStats* %call, %struct._loopStats** %newNode, align 8
  %13 = load %struct._loopStats** %lastNode, align 8
  %cmp6 = icmp ne %struct._loopStats* %13, null
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end5
  %14 = load %struct._loopStats** %newNode, align 8
  %15 = load %struct._loopStats** %lastNode, align 8
  %next8 = getelementptr inbounds %struct._loopStats* %15, i32 0, i32 0
  store %struct._loopStats* %14, %struct._loopStats** %next8, align 8
  br label %if.end10

if.else:                                          ; preds = %if.end5
  %16 = load %struct._loopStats** %newNode, align 8
  %17 = load %struct.LoopList** %L.addr, align 8
  %First9 = getelementptr inbounds %struct.LoopList* %17, i32 0, i32 0
  store %struct._loopStats* %16, %struct._loopStats** %First9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then7
  %18 = load %struct._loopStats** %newNode, align 8
  store %struct._loopStats* %18, %struct._loopStats** %retval
  br label %return

return:                                           ; preds = %if.end10, %if.then4
  %19 = load %struct._loopStats** %retval
  ret %struct._loopStats* %19
}

; Function Attrs: nounwind uwtable
define void @initLoopList() #0 {
entry:
  store %struct._loopStats* null, %struct._loopStats** getelementptr inbounds (%struct.LoopList* @loops, i32 0, i32 0), align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @collectLoopData(i64 %LoopHeaderBBPointer, i64 %tripCount, i64 %estimatedTripCount, i32 %LoopClass) #0 {
entry:
  %LoopHeaderBBPointer.addr = alloca i64, align 8
  %tripCount.addr = alloca i64, align 8
  %estimatedTripCount.addr = alloca i64, align 8
  %LoopClass.addr = alloca i32, align 4
  store i64 %LoopHeaderBBPointer, i64* %LoopHeaderBBPointer.addr, align 8
  store i64 %tripCount, i64* %tripCount.addr, align 8
  store i64 %estimatedTripCount, i64* %estimatedTripCount.addr, align 8
  store i32 %LoopClass, i32* %LoopClass.addr, align 4
  %0 = load i64* %LoopHeaderBBPointer.addr, align 8
  %1 = load i32* %LoopClass.addr, align 4
  %call = call %struct._loopStats* @getOrInsertLoop(%struct.LoopList* @loops, i64 %0, i32 %1)
  %2 = load i64* %tripCount.addr, align 8
  %3 = load i64* %estimatedTripCount.addr, align 8
  call void @addInstance(%struct._loopStats* %call, i64 %2, i64 %3)
  ret void
}

; Function Attrs: nounwind uwtable
define void @flushLoopStats(i8* %moduleIdentifier) #0 {
entry:
  %moduleIdentifier.addr = alloca i8*, align 8
  %outStream = alloca %struct._IO_FILE*, align 8
  %currentNode = alloca %struct._loopStats*, align 8
  store i8* %moduleIdentifier, i8** %moduleIdentifier.addr, align 8
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([10 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %outStream, align 8
  %0 = load %struct._IO_FILE** %outStream, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct._loopStats** getelementptr inbounds (%struct.LoopList* @loops, i32 0, i32 0), align 8
  store %struct._loopStats* %2, %struct._loopStats** %currentNode, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %3 = load %struct._loopStats** %currentNode, align 8
  %cmp = icmp ne %struct._loopStats* %3, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._loopStats** %currentNode, align 8
  %T = getelementptr inbounds %struct._loopStats* %4, i32 0, i32 3
  %root = getelementptr inbounds %struct.LoopResultTree* %T, i32 0, i32 0
  %5 = load %struct._loopResults** %root, align 8
  %6 = load %struct._IO_FILE** %outStream, align 8
  %7 = load %struct._loopStats** %currentNode, align 8
  %LoopClass = getelementptr inbounds %struct._loopStats* %7, i32 0, i32 2
  %8 = load i32* %LoopClass, align 4
  %9 = load i8** %moduleIdentifier.addr, align 8
  %10 = load %struct._loopStats** %currentNode, align 8
  %ID = getelementptr inbounds %struct._loopStats* %10, i32 0, i32 1
  %11 = load i64* %ID, align 8
  call void @printInOrder(%struct._loopResults* %5, %struct._IO_FILE* %6, i32 %8, i8* %9, i64 %11)
  %12 = load %struct._loopStats** %currentNode, align 8
  %next = getelementptr inbounds %struct._loopStats* %12, i32 0, i32 0
  %13 = load %struct._loopStats** %next, align 8
  store %struct._loopStats* %13, %struct._loopStats** %currentNode, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @freeList(%struct.LoopList* @loops)
  %14 = load %struct._IO_FILE** %outStream, align 8
  %call2 = call i32 @fclose(%struct._IO_FILE* %14)
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

declare i32 @fclose(%struct._IO_FILE*) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
